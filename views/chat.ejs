<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/chat.css">
</head>
<body>

    <%- include('partials/header') %>
        
    <main>
      <!--<form id="roomForm">
        <label for="roomSelect">Choisissez une room :</label>
        <select id="roomSelect" required>
          <option value="room1">Room 1</option>
          <option value="room2">Room 2</option>
        </select>
        <button type="submit">Rejoindre</button>
      </form>
      

      <div id="currentRoom">Room actuelle : <span id="currentRoomName"></span></div>
-->
        <ul id="messages"></ul>
            <form id="messageForm" action="">
                <input id="messageInput" type="text" autocomplete="off" />
                <button type="submit">Envoyer</button>
        </form>
    </main>

    <script src="/socket.io/socket.io.js"></script>
<script>
  // Connexion au serveur socket
  const socket = io();
  let username = '';
  // let currentroom = 'room1';

  // Demander le pseudo au chargement de la page
  while (!username.trim()) {
    username = prompt('Veuillez entrer votre pseudo :');
  }

  // const roomSelect = document.getElementById('roomSelect');
  // const currentRoomName = document.getElementById('currentRoomName');
  const form = document.getElementById('messageForm');
  const input = document.getElementById('messageInput');
  const messages = document.getElementById('messages');

  // Afficher la room actuelle au démarrage
  //currentRoomName.textContent = currentRoom;

  // Envoyer l'événement de connexion avec le pseudo
  socket.emit('user connected', username);

  /* document.getElementById('roomForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const newRoom = roomSelect.value;
    socket.emit('leave room', { username, room: currentRoom });
    currentRoom = newRoom;
    currentRoomName.textContent = currentRoom;
    socket.emit('user connected', username, currentRoom);
    messages.innerHTML = '';
  });
  */

  // Recevoir l'historique des messages
  socket.on('message history', (history) => {
    messages.innerHTML = '';
    history.forEach(msg => {
      appendMessage(msg);
    });
  });

  // Écouter les événements de connexion et déconnexion
  socket.on('user connected', (msg) => {
    appendSystemMessage(msg, 'connection-message');
  });

  socket.on('user disconnected', (msg) => {
    appendSystemMessage(msg, 'disconnection-message');
  });

  // Recevoir un nouveau message
  socket.on('message', (msg) => {
    appendMessage(msg);
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const text = input.value.trim();
    if (text) {
      // Vérifier si c'est une commande DAB
      if (text.startsWith('#dab ')) {
        const match = text.match(/#dab (\d+)€?/);
        if (match) {
          const montant = match[1];
          try {
            // Retrait du paramètre devise de l'URL
            const response = await fetch(`/dab/smallest/${montant}`);
            const data = await response.json();
              socket.emit('message', { 
                text: `Coupures pour ${montant}€: ${data.smallest}`,
                username: 'DAB-Bot'
              });
          } catch (error) {
            socket.emit('message', { 
              text: "Erreur lors du calcul des coupures",
              username: 'DAB-Bot'
            });
          }
        }
      } else {
        socket.emit('message', { text, username });
      }
      input.value = '';
    }
  });

  // Ajouter un message à la liste
  function appendMessage(msg) {
    const li = document.createElement('li');
    li.textContent = `${msg.time} - ${msg.username}: ${msg.text}`;
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight;
    }

  // Ajouter un message système (connexion/déconnexion)
  function appendSystemMessage(msg, type) {
    const li = document.createElement('li');
    li.textContent = msg;
    li.classList.add('system-message', type);
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight;
    }
</script>
</body>
</html>